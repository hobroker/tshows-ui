"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DiscoverShowsInput {
  genreIds: [Int!]!
}

type Episode {
  airDate: DateTime
  description: String
  externalId: Int!
  id: Int!
  isWatched: Boolean!
  name: String!
  number: Int!
  seasonNumber: Int!
  show: PartialShow!
  wideImage: String
}

type Genre {
  externalId: Int!
  name: String!
}

input JoinWithGoogleInput {
  token: String!
}

type Mutation {
  joinWithGoogle(input: JoinWithGoogleInput!): User!
  logout: Void!
  refresh: User!
  toggleGenrePreference(input: ToggleGenrePreferenceInput!): Void!
  upsertEpisode(input: UpsertEpisodeInput!): [Void!]!
  upsertWatchlistItem(input: UpsertWatchlistInput!): Watchlist!
}

type PartialShow {
  description: String!
  externalId: Int!
  genres: [Genre!]!
  name: String!
  status: Status!
  tallImage: String!
  wideImage: String!
}

type Preference {
  genres: [Genre!]!
}

type Query {
  allUsers: User!
  discoverShows(input: DiscoverShowsInput!): [PartialShow!]!
  getPreferences: Preference
  getWatchlist: [Watchlist!]!
  listGenres: [Genre!]
  listUpNext: [Episode!]!
  me: User!
}

type Season {
  description: String
  name: String!
  number: Int!
  tallImage: String!
}

enum Status {
  InWatchlist
  None
  StoppedWatching
}

input ToggleGenrePreferenceInput {
  genreId: Int!
}

input UpsertEpisodeInput {
  episodeId: Int!
  isWatched: Boolean!
}

input UpsertWatchlistInput {
  showId: Int!
  status: Status!
}

type User {
  avatar: String
  email: String!
  id: Int!
  name: String!
}

type Void {
  _: String
}

type Watchlist {
  show: PartialShow!
  status: Status!
}
