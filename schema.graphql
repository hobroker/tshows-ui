type Gender {
  createdAt: Timestamp!
  id: Int!
  name: String!
  updatedAt: Timestamp!
}

type Genre {
  externalId: Int!
  name: String!
}

input JoinWithGoogleInput {
  token: String!
}

type Keyword {
  createdAt: Timestamp!
  id: Int!
  name: String!
  updatedAt: Timestamp!
}

type Mutation {
  joinWithGoogle(input: JoinWithGoogleInput!): User!
  logout: Void!
  refresh: User!
  savePreferences(input: UpsertPreferenceInput!): Preference!
}

type Person {
  birthday: Timestamp
  createdAt: Timestamp!
  deathday: Timestamp
  description: String!
  gender: Gender!
  id: Int!
  image: String
  name: String!
  updatedAt: Timestamp!
}

type Preference {
  createdAt: Timestamp!
  genreIds: [String!]!
  id: Int!
  showIds: [String!]!
  updatedAt: Timestamp!
  user: User!
}

type ProductionCompany {
  createdAt: Timestamp!
  id: Int!
  logo: String!
  name: String!
  updatedAt: Timestamp!
}

type Query {
  allUsers: User!
  genders: [Gender!]
  getPreferences: Preference
  keywords: [Keyword!]!
  listGenres: [Genre!]!
  me: User!
  persons: [Person!]
  trending: [Show!]!
}

type Season {
  createdAt: Timestamp!
  description: String!
  id: Int!
  name: String!
  number: Int!
  show: Show!
  tallImage: String!
  updatedAt: Timestamp!
}

type Show {
  createdAt: Timestamp!
  description: String!
  episodeRuntime: Int!
  externalId: Int!
  genres: [Genre!]!
  isInProduction: Boolean!
  keywords: [Keyword!]!
  name: String!
  productionCompanies: [ProductionCompany!]!
  seasons: [Season!]!
  status: Status!
  tallImage: String!
  updatedAt: Timestamp!
  wideImage: String!
}

type Status {
  createdAt: Timestamp!
  id: Int!
  name: String!
  updatedAt: Timestamp!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpsertPreferenceInput {
  genreIds: [Int!]!
}

type User {
  avatar: String
  createdAt: Timestamp!
  email: String!
  id: Int!
  name: String!
  updatedAt: Timestamp!
}

type Void {
  _: String
}
